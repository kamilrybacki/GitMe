# pylint: disable=line-too-long
import requests

CONTEXT_CLEANER_URL = "https://r.1lm.io/p/"
CONTEXT_CLEANER_HEADER = "<p><b>NOTE: </b><span class=\"note\">The following <i>reader view</i> is a cleaned version of the source page. Some information may be missing.</span></p>"

JOB_DESCRIPTION = "You are tasked with summarizing programming projects by use of its README file and a list of used programming languages. Be concise and focus only on main goals and results of the project. Don't delve too much into technical details. Write only raw text summaries, do not include any link or code blocks."  # noqa: E501

# Generated by Code Copilot by promptspellsmith.com

EXAMPLE_CONTEXT_URL = "https://raw.githubusercontent.com/cert-manager/csi-driver/main/README.md"  # Used to fetch in reader mode via https://r.1lm.io/p/ API (Code Copilot does that too!)
EXAMPLE_SUMMARY = "The csi-driver is a Kubernetes CSI plugin that works with cert-manager to automate the management of certificate key pairs for pods. It stores private keys locally on nodes, ensuring they are never transmitted over the network. Each pod replica receives a unique certificate, which is automatically renewed and securely destroyed upon termination. Certificate requests can be embedded within Kubernetes Pod templates, simplifying management. The driver supports secure, per-replica certificates and facilitates secure communications within Kubernetes environments."  # noqa: E501


def clean_context(context_url: str) -> str:
    raw_text = requests.get(
        url=f"{CONTEXT_CLEANER_URL}{context_url}",
        timeout=60
    ).text
    return raw_text.split(CONTEXT_CLEANER_HEADER)[1]


def generate_prompt(readme: str, description: str, technologies: list[str]) -> str:
    return f"""
    {JOB_DESCRIPTION}

    Example:
    {clean_context(EXAMPLE_CONTEXT_URL)}
    {EXAMPLE_SUMMARY}

    Here is the actual input README file:

    Project technologies: {', '.join(technologies)}
    Description: {description}
    Readme: {readme}
    Your summary:
    """

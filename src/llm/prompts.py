# pylint: disable=line-too-long
import requests

CONTEXT_CLEANER_URL = "https://r.1lm.io/p/"
CONTEXT_CLEANER_HEADER = "<p><b>NOTE: </b><span class=\"note\">The following <i>reader view</i> is a cleaned version of the source page. Some information may be missing.</span></p>"

JOB_DESCRIPTION = "You are tasked with summarizing programming projects by use of its README file and a list of used programming languages. Be concise and focus only on main ideas and functionalities. Write only raw text summaries, do not include any link or code blocks."  # noqa: E501

# Generated by Code Copilot by promptspellsmith.com

EXAMPLE_CONTEXT_URL = "https://raw.githubusercontent.com/tokio-rs/tokio/master/README.md"
EXAMPLE_SUMMARY = "Tokio is a high-performance runtime for building asynchronous applications in Rust. It features multithreaded task scheduling and non-blocking I/O, making it ideal for handling network services with asynchronous TCP and UDP support. The event-driven architecture leverages system event queues to ensure efficiency and scalability. Tokio is well-documented and supported by an active community, with additional integration options through related Rust libraries. It is open-source and licensed under MIT, encouraging contributions and further development."  # noqa: E501


def clean_context(context_url: str) -> str:
    raw_text = requests.get(
        url=f"{CONTEXT_CLEANER_URL}{context_url}",
        timeout=60
    ).text
    return raw_text.split(CONTEXT_CLEANER_HEADER)[1]


def generate_prompt(readme: str, description: str, technologies: list[str]) -> str:
    return f"""
    {JOB_DESCRIPTION}

    Example:
    {clean_context(EXAMPLE_CONTEXT_URL)}
    {EXAMPLE_SUMMARY}

    Here is the actual input README file:

    Project technologies: {', '.join(technologies)}
    Description: {description}
    Readme: {readme}
    Your summary:
    """
